{"version":3,"sources":["utils/getWeb3.js","components/MainInfo.js","components/TransactionInfo.js","components/BlockListItem.js","components/BlockList.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","MainInfo","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","badgeStyles","greyBackground","greyTextColor","greenBackground","greenTextColor","blueEagleBackground","react_default","createElement","className","index_esm","size","shape","background","foreground","lastBlockNumber","dist_default","durationFromNow","interval","ago","Date","lastBlockTime","style","paddingRight","paddingLeft","networkId","gasUsedOnBlock","difficulty","lastBlockSize","lastBlockHash","Component","TransactionInfo","transfromWeiToEther","amount","utils","fromWei","String","_this$props","transactioninfo","value","Number","gasPrice","from","to","BlockListItem","updateTransactionInfo","_ref","transactionObject","setEtherscanTransactionHash","hash","setState","_x","apply","arguments","returnTransactionInfoFromEthereum","_ref2","_callee2","transactionHash","_context2","eth","getTransaction","abrupt","sent","_x2","componentDidMount","_callee3","_context3","all","block","blockTransactions","map","then","transactionData","onlyPaidTransactions","filter","transaction","length","noPaidTransactionsObject","activeItem","etherscanUrl","transactionHashEtherscan","handleChange","bind","assertThisInitialized","index","_this2","header","title","concat","number","marginBottom","items","active","onChange","src_components_TransactionInfo","transactionObjectSelected","Anchor","mode","wide","href","target","BlockList","lastTenBlocks","i","key","src_components_BlockListItem","App","accounts","getAccounts","net","getId","getLastBlockInfo","setInterval","alert","error","lastBlock","lastBlockTransactions","getBlockNumber","getBlock","gasUsed","timestamp","transactions","createLastTenBlocks","_ref3","_callee4","blockNumber","_web3","blocksArray","_context4","_ref4","e","blockHash","blockSize","blockTime","blockDifficulty","_x3","_x4","result","publicUrl","margin","src_components_MainInfo","width","textAlign","src_components_BlockList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bde2cc12.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"https://mainnet.infura.io/v3/813f7758462347cbb1d64391851852d1\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using infura web3 (mainnet).\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport Moment from 'react-moment';\nimport { Text, Badge } from '@aragon/ui';\nimport \"./MainInfo.css\";\n\nclass MainInfo extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      badgeStyles: {\n        greyBackground: \"#dceaef\",\n        greyTextColor: \"#6d8088\",\n        greenBackground: \"#21d48f\",\n        greenTextColor: \"white\",\n        blueEagleBackground: \"#00cbe6\",\n      }\n    };\n  }\n\n  render() {\n\n    const { badgeStyles } = this.state;\n\n    return (\n      <div className=\"headerContainer\">\n\n        <div className=\"headerGroupItem mobileTopInfo\">\n\n          <div className=\"4\">\n            <Text size=\"xlarge\">\n              Last block\n            </Text>\n            <div className=\"currentBlockNumberContainer\">\n              <Badge shape=\"compact\"\n              background={\"transparent\"} \n              foreground={\"white\"}>\n                <div className=\"currentBlockNumber\">\n                  {this.props.lastBlockNumber}            \n                </div>\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"headerInnerItem\">\n            <Text size=\"small\">\n              Time since last block\n            </Text>\n            <span>\n              <Badge shape=\"compact\"\n                background={badgeStyles.greyBackground} \n                foreground={badgeStyles.greyTextColor}>\n                  <div className=\"timeAgo\">\n                    <Moment durationFromNow interval={1000} ago>\n                      {new Date(this.props.lastBlockTime*1000)}\n                    </Moment>   \n                  </div>      \n              </Badge>\n            </span>\n          </div>\n\n        </div>\n\n        <div className=\"headerGroupItem mobileBottomInfo\">\n\n          <div className=\"headerInnerItem\">\n            <span>Network ID</span>\n            <span>\n              <Badge shape=\"compact\"\n                background={badgeStyles.greyBackground} \n                foreground={badgeStyles.greyTextColor}\n                style={{paddingRight: \"5px\",paddingLeft: \"5px\"}}>\n                {this.props.networkId}            \n              </Badge>\n            </span>\n          </div>\n\n          <div className=\"headerInnerItem\">\n            <span>Gas used</span>\n            <span>\n              <Badge shape=\"compact\"\n                background={badgeStyles.greyBackground} \n                foreground={badgeStyles.greyTextColor}>\n                {this.props.gasUsedOnBlock}            \n              </Badge>\n            </span>\n          </div>\n\n          <div className=\"headerInnerItem\">\n            <span>Difficulty</span>\n            <span>\n              <Badge shape=\"compact\"\n                background={badgeStyles.greyBackground} \n                foreground={badgeStyles.greyTextColor}>\n                {this.props.difficulty}            \n              </Badge>\n            </span>\n          </div>\n        </div>\n\n        <div className=\"headerGroupItem mobileBottomInfo\">\n          <div className=\"headerInnerItem\">\n            <span>Block size</span>\n            <span>\n              <Badge shape=\"compact\"\n                background={badgeStyles.greyBackground} \n                foreground={badgeStyles.greyTextColor}>\n                {this.props.lastBlockSize}            \n              </Badge>\n            </span>\n\n          </div>\n\n          <div className=\"headerInnerItem\">\n            <span>Timestamp</span>\n            <span>\n              <Badge shape=\"compact\"\n                background={badgeStyles.greyBackground} \n                foreground={badgeStyles.greyTextColor}>\n                {this.props.lastBlockTime}            \n              </Badge>\n            </span>\n          </div>\n\n          <div className=\"headerInnerItem mainBlockHash\">\n            <span>Block hash</span>\n            <Badge shape=\"compact\"\n              background={badgeStyles.greyBackground} \n              foreground={badgeStyles.greyTextColor}>\n              {this.props.lastBlockHash}            \n            </Badge>\n          </div>\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default MainInfo;","import React, { Component } from \"react\";\nimport { Table, TableHeader, TableRow, TableCell, Text, Badge, DropDown } from '@aragon/ui';\n\nimport \"./TransactionInfo.css\";\n\nclass TransactionInfo extends Component {\n\n  transfromWeiToEther = (amount) => {\n\n    return this.props.web3.utils.fromWei(String(amount), 'ether');\n  };\n\n  render() {\n\n    const { badgeStyles, transactioninfo } = this.props;\n\n    return (\n        \n      <div className=\"TransactionInfoContainer\">\n\n        <div className=\"transactionInnerContainer\">\n            <div className=\"tableCellContent\">\n                <span>\n                Ether\n                </span>\n                <span>\n                    <Badge shape=\"compact\"\n                    background={badgeStyles.greyBackground} \n                    foreground={badgeStyles.greyTextColor}>\n                        <div className=\"transactionText\">\n                            {this.transfromWeiToEther(transactioninfo.value)}\n                        </div>\n                    </Badge>\n                </span>\n            </div>\n\n            <div className=\"tableCellContent\">\n                <span>\n                Gas price (Gwei)\n                </span>\n                <span>\n                    <Badge shape=\"compact\"\n                    background={badgeStyles.greyBackground} \n                    foreground={badgeStyles.greyTextColor}>\n                        <div className=\"transactionText\">\n                            {Number(transactioninfo.gasPrice)/1000000000}\n                        </div>\n                    </Badge>\n                </span>\n            </div>\n        </div>\n\n        <div className=\"transactionInnerContainer\">\n            <div className=\"tableCellContent\">\n                <span>\n                From\n                </span>\n                <span>\n                    <Badge shape=\"compact\"\n                    background={badgeStyles.greyBackground} \n                    foreground={badgeStyles.greyTextColor}>\n                        <div className=\"transactionText\">\n                            {transactioninfo.from}\n                        </div>\n                    </Badge>\n                </span>\n            </div>\n\n            <div className=\"tableCellContent\">\n                <span>\n                To\n                </span>\n                <span>\n                    <Badge shape=\"compact\"\n                    background={badgeStyles.greyBackground} \n                    foreground={badgeStyles.greyTextColor}>\n                        <div className=\"transactionText\">\n                            {transactioninfo.to}\n                        </div>\n                    </Badge>\n                </span>\n            </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default TransactionInfo;","import React, { Component } from \"react\";\nimport { Table, TableHeader, TableRow, TableCell, Text, Badge, DropDown, Button, IconShare } from '@aragon/ui';\nimport TransactionInfo from \"./TransactionInfo\";\nimport \"./BlockListItem.css\";\n\nclass BlockListItem extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeItem: 0,\n      transactioninfo: {\n        value: 0,\n        from: \"0x\",\n        to: \"0x\"\n      },\n      badgeStyles: {\n        greyBackground: \"#dceaef\",\n        greyTextColor: \"#6d8088\",\n        greenBackground: \"#21d48f\",\n        greenTextColor: \"white\",\n        blueEagleBackground: \"#00cbe6\",\n      },\n      onlyPaidTransactions: [],\n      etherscanUrl: \"https://etherscan.io/tx/\",\n      transactionHashEtherscan: \"\"\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.updateTransactionInfo = this.updateTransactionInfo.bind(this);\n  }\n\n  handleChange(index) {\n\n    this.setState({ \n      activeItem: index \n    }, () => this.updateTransactionInfo(this.state.onlyPaidTransactions[this.state.activeItem]));\n  };\n\n  updateTransactionInfo = async (transactionObject) => {\n\n    this.setEtherscanTransactionHash(transactionObject.hash);\n  \n    this.setState({\n        transactioninfo: transactionObject\n    });\n  };\n\n  returnTransactionInfoFromEthereum = async (transactionHash) => {\n    \n    return await this.props.web3.eth.getTransaction(transactionHash);\n  };\n\n  setEtherscanTransactionHash(transactionHash) {\n\n    this.setState({\n      transactionHashEtherscan: transactionHash\n    });\n  }\n\n  componentDidMount = async () => {\n\n    //show only paid transactions\n    Promise.all(\n\n      this.props.block.blockTransactions.map( transactionHash => {\n\n        return this.returnTransactionInfoFromEthereum(transactionHash);\n      })\n    \n    ).then( transactionData => {\n\n      const onlyPaidTransactions = transactionData.filter( transaction => transaction.value > 0 );\n\n      console.log(onlyPaidTransactions);\n\n      if (onlyPaidTransactions.length > 0) {\n\n        this.setState({\n          onlyPaidTransactions: onlyPaidTransactions\n        }, () => this.updateTransactionInfo(this.state.onlyPaidTransactions[0]));\n\n      } else {\n\n        let noPaidTransactionsObject = [{\n          gasPrice: 0,\n          hash: \"No paid transactions has been sent on this block\",\n          from: \"do not apply\",\n          to: \"do not apply\",\n          value: 0\n        }];\n\n        this.setState({\n          onlyPaidTransactions: noPaidTransactionsObject\n        }, () => this.updateTransactionInfo(noPaidTransactionsObject[0]));\n\n      }\n\n    });\n  }\n\n  render() {\n    \n    return (\n      <div className=\"BlockListItem\">\n        <Table\n          className=\"tableContainer\"\n          header={\n            <TableRow>\n              <TableHeader title={ `Block Number ${this.props.block.number}`} />\n            </TableRow>\n          }\n        >\n          <TableRow>\n\n            <TableCell>\n              <div className=\"OuterTableCellContent\">\n\n                <div className=\"tableCellContent\">\n                  <span style={{marginBottom: \"5px\"}}>\n                  Block transactions\n                  </span>\n                  <DropDown\n                    items={this.state.onlyPaidTransactions.map(transaction => transaction.hash)}\n                    active={this.state.activeItem}\n                    onChange={this.handleChange}\n                  />\n                  <div>\n                    <TransactionInfo\n                      transactionObjectSelected={this.state.onlyPaidTransactions[this.state.activeItem]}\n                      web3={this.props.web3}\n                      transactioninfo={this.state.transactioninfo}\n                      badgeStyles={this.state.badgeStyles}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"tableCellContent marginButton\">\n                  <Button.Anchor mode=\"outline\" wide href={this.state.etherscanUrl + this.state.transactionHashEtherscan} target=\"_blank\">\n                    <div className=\"etherscanButton\">\n                      <span>\n                        <IconShare />\n                      </span>\n                      <div className=\"etherscanButton hideOnMobile\">\n                        <Text size=\"normal\">see</Text>\n                        <Text size=\"normal\" style={{marginBottom: \"5px\"}}>transaction</Text>\n                        <Text size=\"xsmall\">(etherscan.io)</Text>\n                      </div>\n                    </div>\n                  </Button.Anchor>\n                </div>\n\n              </div>\n            </TableCell>\n\n          </TableRow>\n        </Table>\n\n      </div>\n    );\n  }\n}\n\nexport default BlockListItem;","import React, { Component } from \"react\";\nimport BlockListItem from \"./BlockListItem\";\nimport \"./BlockList.css\";\n\nclass BlockList extends Component {\n\n  render() {\n    \n    return (\n      <div className=\"blockList\">\n        {   \n            this.props.lastTenBlocks.map( (block, i) => {\n                return (\n                    <div key={i}> \n                        <BlockListItem \n                            block={block}\n                            index={i}\n                            web3={this.props.web3}\n                        />\n                    </div>\n                );\n            })\n        }\n      </div>\n    );\n  }\n}\n\nexport default BlockList;","import React, { Component } from \"react\";\nimport { AragonApp, Text } from '@aragon/ui';\nimport getWeb3 from \"./utils/getWeb3\";\nimport MainInfo from \"./components/MainInfo\";\nimport BlockList from \"./components/BlockList\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      web3: null,\n      accounts: null,\n      networkId: null,\n      lastBlockNumber: null,\n      lastBlockHash: null,\n      lastBlockSize: null, \n      gasUsedOnBlock: null,\n      lastBlockTime: null,\n      lastBlockTransactions: null,\n      difficulty: null,\n      lastTenBlocks: [],\n    };\n  }\n\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n\n      await this.setState({\n        web3: web3,\n        accounts: accounts,\n        networkId: networkId\n      }, this.getLastBlockInfo);\n\n      setInterval(this.getLastBlockInfo, 10000);\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  getLastBlockInfo = async () => {\n    \n    const { web3 } = this.state;\n\n    let lastBlockNumber = await web3.eth.getBlockNumber();\n    let lastBlock = await web3.eth.getBlock(lastBlockNumber);\n    let lastBlockHash = lastBlock.hash;\n    let lastBlockSize = lastBlock.size;\n    let gasUsedOnBlock = lastBlock.gasUsed;\n    let lastBlockTime = lastBlock.timestamp;\n    let lastBlockTransactions = lastBlock.transactions;\n    let difficulty = lastBlock.difficulty;\n\n    this.createLastTenBlocks(lastBlockNumber, web3);\n\n    this.setState({\n      lastBlockNumber: lastBlockNumber,\n      lastBlockHash: lastBlockHash,\n      lastBlockSize: lastBlockSize, \n      gasUsedOnBlock: gasUsedOnBlock,\n      lastBlockTime: lastBlockTime,\n      lastBlockTransactions: lastBlockTransactions,\n      difficulty: difficulty,\n    });\n  };\n\n  createLastTenBlocks = async (blockNumber, _web3)  => {\n    let blocksArray = [1,2,3,4,5,6,7,8,9,10];\n\n    Promise.all(\n      \n      blocksArray.map( async (e, i) => {\n      \n        let block = await _web3.eth.getBlock(blockNumber - i);\n  \n        return {\n          number: blockNumber - i,\n          blockHash: block.hash,\n          blockSize: block.size,\n          gasUsedOnBlock: block.gasUsed,\n          blockTime: block.timestamp,\n          blockTransactions: block.transactions,\n          blockDifficulty: block.difficulty,\n        };\n      })\n\n    ).then( result => {\n      this.setState({\n        lastTenBlocks: result\n      });\n    });\n  };\n\n  render() {\n\n    return (\n      <AragonApp publicUrl=\"/aragon-ui-assets/\">\n\n        <div className=\"App\">\n\n          <Text size=\"xxlarge\" style={{margin: \"20px\"}}>\n            <i className=\"fab fa-ethereum\"></i> Ethereum Block Explorer\n          </Text>\n\n          <div className=\"aragonCard Header\">\n            <MainInfo\n              networkId={this.state.networkId}\n              lastBlockNumber={this.state.lastBlockNumber}\n              lastBlockHash={this.state.lastBlockHash}\n              lastBlockSize={this.state.lastBlockSize}\n              gasUsedOnBlock={this.state.gasUsedOnBlock}\n              lastBlockTime={this.state.lastBlockTime}\n              lastBlockTransactions={this.state.lastBlockTransactions}\n              difficulty={this.state.difficulty}\n            />\n          </div>\n\n          <Text size=\"xsmall\" style={{width: \"75vw\", marginBottom: \"30px\", textAlign: \"center\"}}>\n            Here you can see the last ten blocks on Ethereum and all its transactions within each block. Transactions without ether movement will not be displayed.\n          </Text>\n\n          <BlockList\n            lastTenBlocks={this.state.lastTenBlocks}\n            web3={this.state.web3}\n          />\n\n          <Text size=\"xsmall\" style={{marginBottom: \"50px\"}}>\n            Made with ♡ by <a href=\"https://albererre.com/\" target=\"_blank\">Alber Erre</a>\n          </Text>\n\n        </div>\n      </AragonApp>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
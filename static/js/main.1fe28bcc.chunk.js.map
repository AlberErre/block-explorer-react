{"version":3,"sources":["utils/getWeb3.js","components/MainInfo.js","components/TransactionInfo.js","components/BlockListItem.js","components/BlockList.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","provider","_web","wrap","_context","prev","next","console","log","Web3","providers","HttpProvider","stop","this","MainInfo","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","badgeStyles","greyBackground","greyTextColor","greenBackground","greenTextColor","blueEagleBackground","_this$props","lastBlockNumber","lastBlockTime","networkId","gasUsedOnBlock","difficulty","lastBlockSize","lastBlockHash","react_default","createElement","className","index_esm","size","shape","background","foreground","dist_default","durationFromNow","interval","ago","Date","style","paddingRight","paddingLeft","Component","TransactionInfo","transfromWeiToEther","amount","utils","fromWei","String","transactioninfo","value","Number","gasPrice","from","to","BlockListItem","updateTransactionInfo","_ref","transactionObject","setEtherscanTransactionHash","hash","setState","_x","apply","arguments","returnTransactionInfoFromEthereum","_ref2","_callee2","transactionHash","_context2","eth","getTransaction","abrupt","sent","_x2","componentDidMount","_callee3","_context3","all","block","blockTransactions","map","then","transactionData","onlyPaidTransactions","filter","transaction","length","spinnerIsActive","noPaidTransactionsObject","activeItem","etherscanUrl","transactionHashEtherscan","handleChange","bind","assertThisInitialized","index","_this2","_this$state","_this$state2","header","title","concat","number","marginTop","react_spinners","color","marginBottom","items","active","onChange","src_components_TransactionInfo","transactionObjectSelected","Anchor","mode","wide","target","href","BlockList","lastTenBlocks","i","key","src_components_BlockListItem","App","accounts","getAccounts","net","getId","getLastBlockInfo","setInterval","t0","alert","error","lastBlock","lastBlockTransactions","getBlockNumber","getBlock","gasUsed","timestamp","transactions","createLastTenBlocks","_ref3","_callee4","blockNumber","_web3","blocksArray","_context4","_ref4","e","blockHash","blockSize","blockTime","blockDifficulty","_x3","_x4","result","loadingSpinner","publicUrl","margin","src_components_MainInfo","width","textAlign","src_components_BlockList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1fe28bcc.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"https://mainnet.infura.io/v3/813f7758462347cbb1d64391851852d1\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using infura web3 (mainnet).\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport Moment from 'react-moment';\nimport { Text, Badge } from '@aragon/ui';\nimport \"./MainInfo.css\";\n\nclass MainInfo extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      badgeStyles: {\n        greyBackground: \"#dceaef\",\n        greyTextColor: \"#6d8088\",\n        greenBackground: \"#21d48f\",\n        greenTextColor: \"white\",\n        blueEagleBackground: \"#00cbe6\",\n      }\n    };\n  }\n\n  render() {\n\n    const { badgeStyles } = this.state;\n    const { lastBlockNumber, lastBlockTime, networkId, gasUsedOnBlock,\n            difficulty, lastBlockSize, lastBlockHash } = this.props;\n\n    return (\n      <div className=\"headerContainer\">\n\n        <div className=\"headerGroupItem mobileTopInfo\">\n\n          <div className=\"4\">\n            <Text size=\"xlarge\">\n              Last block\n            </Text>\n            <div className=\"currentBlockNumberContainer\">\n              <Badge shape=\"compact\"\n              background={\"transparent\"} \n              foreground={\"white\"}>\n                <div className=\"currentBlockNumber\">\n                  {lastBlockNumber}            \n                </div>\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"headerInnerItem\">\n            <Text size=\"small\">\n              Time since last block\n            </Text>\n            <span>\n              <Badge shape=\"compact\"\n                background={badgeStyles.greyBackground} \n                foreground={badgeStyles.greyTextColor}>\n                  <div className=\"timeAgo\">\n                    <Moment durationFromNow interval={1000} ago>\n                      {new Date(lastBlockTime*1000)}\n                    </Moment>   \n                  </div>      \n              </Badge>\n            </span>\n          </div>\n\n        </div>\n\n        <div className=\"headerGroupItem mobileBottomInfo\">\n\n          <div className=\"headerInnerItem\">\n            <span>Network ID</span>\n            <span>\n              <Badge shape=\"compact\"\n                background={badgeStyles.greyBackground} \n                foreground={badgeStyles.greyTextColor}\n                style={{paddingRight: \"5px\",paddingLeft: \"5px\"}}>\n                {networkId}            \n              </Badge>\n            </span>\n          </div>\n\n          <div className=\"headerInnerItem\">\n            <span>Gas used</span>\n            <span>\n              <Badge shape=\"compact\"\n                background={badgeStyles.greyBackground} \n                foreground={badgeStyles.greyTextColor}>\n                {gasUsedOnBlock}            \n              </Badge>\n            </span>\n          </div>\n\n          <div className=\"headerInnerItem\">\n            <span>Difficulty</span>\n            <span>\n              <Badge shape=\"compact\"\n                background={badgeStyles.greyBackground} \n                foreground={badgeStyles.greyTextColor}>\n                {difficulty}            \n              </Badge>\n            </span>\n          </div>\n        </div>\n\n        <div className=\"headerGroupItem mobileBottomInfo\">\n          <div className=\"headerInnerItem\">\n            <span>Block size</span>\n            <span>\n              <Badge shape=\"compact\"\n                background={badgeStyles.greyBackground} \n                foreground={badgeStyles.greyTextColor}>\n                {lastBlockSize}            \n              </Badge>\n            </span>\n\n          </div>\n\n          <div className=\"headerInnerItem\">\n            <span>Timestamp</span>\n            <span>\n              <Badge shape=\"compact\"\n                background={badgeStyles.greyBackground} \n                foreground={badgeStyles.greyTextColor}>\n                {lastBlockTime}            \n              </Badge>\n            </span>\n          </div>\n\n          <div className=\"headerInnerItem mainBlockHash\">\n            <span>Block hash</span>\n            <Badge shape=\"compact\"\n              background={badgeStyles.greyBackground} \n              foreground={badgeStyles.greyTextColor}>\n              {lastBlockHash}            \n            </Badge>\n          </div>\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default MainInfo;","import React, { Component } from \"react\";\nimport { Badge } from '@aragon/ui';\n\nimport \"./TransactionInfo.css\";\n\nclass TransactionInfo extends Component {\n\n  transfromWeiToEther = (amount) => {\n\n    return this.props.web3.utils.fromWei(String(amount), 'ether');\n  };\n\n  render() {\n\n    const { badgeStyles, transactioninfo } = this.props;\n\n    return (\n        \n      <div className=\"TransactionInfoContainer\">\n\n        <div className=\"transactionInnerContainer\">\n            <div className=\"tableCellContent\">\n                <span>\n                Ether\n                </span>\n                <span>\n                    <Badge shape=\"compact\"\n                    background={badgeStyles.greyBackground} \n                    foreground={badgeStyles.greyTextColor}>\n                        <div className=\"transactionText\">\n                            {this.transfromWeiToEther(transactioninfo.value)}\n                        </div>\n                    </Badge>\n                </span>\n            </div>\n\n            <div className=\"tableCellContent\">\n                <span>\n                Gas price (Gwei)\n                </span>\n                <span>\n                    <Badge shape=\"compact\"\n                    background={badgeStyles.greyBackground} \n                    foreground={badgeStyles.greyTextColor}>\n                        <div className=\"transactionText\">\n                            {Number(transactioninfo.gasPrice)/1000000000}\n                        </div>\n                    </Badge>\n                </span>\n            </div>\n        </div>\n\n        <div className=\"transactionInnerContainer\">\n            <div className=\"tableCellContent\">\n                <span>\n                From\n                </span>\n                <span>\n                    <Badge shape=\"compact\"\n                    background={badgeStyles.greyBackground} \n                    foreground={badgeStyles.greyTextColor}>\n                        <div className=\"transactionText\">\n                            {transactioninfo.from}\n                        </div>\n                    </Badge>\n                </span>\n            </div>\n\n            <div className=\"tableCellContent\">\n                <span>\n                To\n                </span>\n                <span>\n                    <Badge shape=\"compact\"\n                    background={badgeStyles.greyBackground} \n                    foreground={badgeStyles.greyTextColor}>\n                        <div className=\"transactionText\">\n                            {transactioninfo.to}\n                        </div>\n                    </Badge>\n                </span>\n            </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default TransactionInfo;","import React, { Component } from \"react\";\nimport { Table, TableHeader, TableRow, TableCell, \n         Text, DropDown, Button, IconShare } from '@aragon/ui';\nimport TransactionInfo from \"./TransactionInfo\";\nimport { BarLoader } from 'react-spinners';\nimport \"./BlockListItem.css\";\n\nclass BlockListItem extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      spinnerIsActive: true,\n      activeItem: 0,\n      transactioninfo: {\n        value: 0,\n        from: \"0x\",\n        to: \"0x\"\n      },\n      badgeStyles: {\n        greyBackground: \"#dceaef\",\n        greyTextColor: \"#6d8088\",\n        greenBackground: \"#21d48f\",\n        greenTextColor: \"white\",\n        blueEagleBackground: \"#00cbe6\",\n      },\n      onlyPaidTransactions: [],\n      etherscanUrl: \"https://etherscan.io/tx/\",\n      transactionHashEtherscan: \"\"\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.updateTransactionInfo = this.updateTransactionInfo.bind(this);\n  }\n\n  handleChange(index) {\n    let {onlyPaidTransactions, activeItem} = this.state; \n\n    this.setState({ \n      activeItem: index \n    }, () => this.updateTransactionInfo(onlyPaidTransactions[activeItem]));\n  };\n\n  updateTransactionInfo = async (transactionObject) => {\n    this.setEtherscanTransactionHash(transactionObject.hash);\n  \n    this.setState({\n        transactioninfo: transactionObject\n    });\n  };\n\n  returnTransactionInfoFromEthereum = async (transactionHash) => {\n\n    return await this.props.web3.eth.getTransaction(transactionHash);\n  };\n\n  setEtherscanTransactionHash(transactionHash) {\n\n    this.setState({\n      transactionHashEtherscan: transactionHash\n    });\n  }\n\n  componentDidMount = async () => {\n\n    //show only paid transactions\n    Promise.all(\n\n      this.props.block.blockTransactions.map( transactionHash => {\n        return this.returnTransactionInfoFromEthereum(transactionHash);\n      })\n    \n    ).then( transactionData => {\n      const onlyPaidTransactions = transactionData.filter( transaction => transaction.value > 0 );\n\n      if (onlyPaidTransactions.length > 0) {\n        this.setState({\n          onlyPaidTransactions: onlyPaidTransactions,\n          spinnerIsActive: false\n        }, () => this.updateTransactionInfo(this.state.onlyPaidTransactions[0]));\n\n      } else {\n        let noPaidTransactionsObject = [{\n          gasPrice: 0,\n          hash: \"No paid transactions has been sent on this block\",\n          from: \"do not apply\",\n          to: \"do not apply\",\n          value: 0\n        }];\n\n        this.setState({\n          onlyPaidTransactions: noPaidTransactionsObject,\n          spinnerIsActive: false\n        }, () => this.updateTransactionInfo(noPaidTransactionsObject[0]));\n      }\n\n    });\n  }\n\n  render() {\n    const { web3, block } = this.props;\n    const { spinnerIsActive, onlyPaidTransactions, activeItem,\n            transactioninfo, badgeStyles, etherscanUrl, transactionHashEtherscan } = this.state;\n\n    return (\n      <div className=\"BlockListItem\">\n\n        <Table className=\"tableContainer\"\n          header={\n            <TableRow>\n              <TableHeader title={ `Block Number ${block.number}`} />\n            </TableRow>\n          }>\n          <TableRow>\n\n            <TableCell>\n              {\n                spinnerIsActive &&\n                <span>\n                  Loading block data...\n                  <div style={{marginTop: \"10px\"}}>\n                    <BarLoader color={'#00F0E0'} />\n                  </div>\n                </span>\n              }\n\n              {\n                !spinnerIsActive && \n                <div className=\"OuterTableCellContent\">\n\n                  <div className=\"tableCellContent\">\n                    <span style={{marginBottom: \"5px\"}}>\n                    Block transactions\n                    </span>\n                    <DropDown\n                      items={onlyPaidTransactions.map(transaction => transaction.hash)}\n                      active={activeItem}\n                      onChange={this.handleChange}\n                    />\n                    <div>\n                      <TransactionInfo\n                        transactionObjectSelected={onlyPaidTransactions[activeItem]}\n                        web3={web3}\n                        transactioninfo={transactioninfo}\n                        badgeStyles={badgeStyles}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"etherscanButton\">\n                    <Button.Anchor \n                      mode=\"outline\" wide target=\"_blank\"\n                      href={etherscanUrl + transactionHashEtherscan}>\n                      <div className=\"etherscanButton\">\n                        <span>\n                          <IconShare />\n                        </span>\n                        <div className=\"etherscanButton hideOnMobile\">\n                          <Text size=\"normal\">see</Text>\n                          <Text size=\"normal\" style={{marginBottom: \"5px\"}}>transaction</Text>\n                          <Text size=\"xsmall\">(etherscan.io)</Text>\n                        </div>\n                      </div>\n                    </Button.Anchor>\n                  </div>\n\n                </div>\n              }\n            </TableCell>\n\n          </TableRow>\n        </Table>\n\n      </div>\n    );\n  }\n}\n\nexport default BlockListItem;","import React, { Component } from \"react\";\nimport BlockListItem from \"./BlockListItem\";\nimport \"./BlockList.css\";\n\nclass BlockList extends Component {\n\n  render() {\n    \n    return (\n      <div className=\"blockList\">\n        {   \n            this.props.lastTenBlocks.map( (block, i) => {\n                return (\n                    <div key={i}> \n                        <BlockListItem \n                            block={block}\n                            index={i}\n                            web3={this.props.web3}\n                        />\n                    </div>\n                );\n            })\n        }\n      </div>\n    );\n  }\n}\n\nexport default BlockList;","import React, { Component } from \"react\";\nimport { AragonApp, Text } from '@aragon/ui';\nimport { BarLoader } from 'react-spinners';\nimport getWeb3 from \"./utils/getWeb3\";\nimport MainInfo from \"./components/MainInfo\";\nimport BlockList from \"./components/BlockList\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      web3: null,\n      accounts: null,\n      networkId: null,\n      lastBlockNumber: null,\n      lastBlockHash: null,\n      lastBlockSize: null, \n      gasUsedOnBlock: null,\n      lastBlockTime: null,\n      lastBlockTransactions: null,\n      difficulty: null,\n      lastTenBlocks: [],\n      loadingSpinner: true,\n    };\n  }\n\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n\n      await this.setState({\n        web3: web3,\n        accounts: accounts,\n        networkId: networkId\n      }, this.getLastBlockInfo);\n\n      setInterval(this.getLastBlockInfo, 10000);\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  getLastBlockInfo = async () => {\n    \n    const { web3 } = this.state;\n\n    let lastBlockNumber = await web3.eth.getBlockNumber();\n    let lastBlock = await web3.eth.getBlock(lastBlockNumber);\n    let lastBlockHash = lastBlock.hash;\n    let lastBlockSize = lastBlock.size;\n    let gasUsedOnBlock = lastBlock.gasUsed;\n    let lastBlockTime = lastBlock.timestamp;\n    let lastBlockTransactions = lastBlock.transactions;\n    let difficulty = lastBlock.difficulty;\n\n    this.createLastTenBlocks(lastBlockNumber, web3);\n\n    this.setState({\n      lastBlockNumber: lastBlockNumber,\n      lastBlockHash: lastBlockHash,\n      lastBlockSize: lastBlockSize, \n      gasUsedOnBlock: gasUsedOnBlock,\n      lastBlockTime: lastBlockTime,\n      lastBlockTransactions: lastBlockTransactions,\n      difficulty: difficulty,\n    });\n  };\n\n  createLastTenBlocks = async (blockNumber, _web3)  => {\n    let blocksArray = [1,2,3,4,5,6,7,8,9,10];\n\n    Promise.all(\n      \n      blocksArray.map( async (e, i) => {\n      \n        let block = await _web3.eth.getBlock(blockNumber - i);\n  \n        return {\n          number: blockNumber - i,\n          blockHash: block.hash,\n          blockSize: block.size,\n          gasUsedOnBlock: block.gasUsed,\n          blockTime: block.timestamp,\n          blockTransactions: block.transactions,\n          blockDifficulty: block.difficulty,\n        };\n      })\n\n    ).then( result => {\n      this.setState({\n        lastTenBlocks: result,\n        loadingSpinner: false\n      });\n    });\n  };\n\n  render() {\n\n    const { loadingSpinner, networkId, lastBlockNumber, lastBlockHash, lastBlockSize,\n            gasUsedOnBlock, lastBlockTime, lastBlockTransactions, difficulty, \n            lastTenBlocks, web3} = this.state;\n\n    return (\n      <AragonApp publicUrl=\"/aragon-ui-assets/\">\n        \n        {\n          loadingSpinner &&\n          <div className=\"spinnerContainer\">\n            Loading...\n            <div style={{marginTop: \"10px\"}}>\n              <BarLoader color={'#00F0E0'} />\n            </div>\n          </div>\n        }\n        \n        {\n          !loadingSpinner &&\n\n          <div className=\"App\">\n\n            <Text size=\"xxlarge\" style={{margin: \"20px\"}}>\n              <i className=\"fab fa-ethereum\"></i> Ethereum Block Explorer\n            </Text>\n\n            <div className=\"aragonCard Header\">\n              <MainInfo\n                networkId={networkId}\n                lastBlockNumber={lastBlockNumber}\n                lastBlockHash={lastBlockHash}\n                lastBlockSize={lastBlockSize}\n                gasUsedOnBlock={gasUsedOnBlock}\n                lastBlockTime={lastBlockTime}\n                lastBlockTransactions={lastBlockTransactions}\n                difficulty={difficulty}\n              />\n            </div>\n\n            <Text size=\"xsmall\" style={{width: \"75vw\", marginBottom: \"30px\", textAlign: \"center\"}}>\n              Here you can see the last ten blocks on Ethereum and all its transactions within each block. Transactions without ether movement will not be displayed.\n            </Text>\n\n            <BlockList\n              lastTenBlocks={lastTenBlocks}\n              web3={web3}\n            />\n\n            <Text size=\"xsmall\" style={{marginBottom: \"50px\"}}>\n              Made with ♡ by <a href=\"https://albererre.com/\" target=\"_blank\">Alber Erre</a>\n            </Text>\n\n          </div>\n        }\n\n      </AragonApp>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}